{"version":3,"file":"index-CDaBms2K.js","sources":["../../frontend/node_modules/websocket-ts/dist/esm/src/backoff/constantbackoff.js","../../frontend/node_modules/websocket-ts/dist/esm/src/backoff/exponentialbackoff.js","../../frontend/node_modules/websocket-ts/dist/esm/src/backoff/linearbackoff.js","../../frontend/node_modules/websocket-ts/dist/esm/src/queue/array_queue.js","../../frontend/node_modules/websocket-ts/dist/esm/src/queue/ring_queue.js","../../frontend/node_modules/websocket-ts/dist/esm/src/websocket_event.js","../../frontend/node_modules/websocket-ts/dist/esm/src/websocket.js","../../frontend/node_modules/websocket-ts/dist/esm/src/websocket_builder.js"],"sourcesContent":["/**\n * ConstantBackoff always returns the same backoff-time.\n */\nexport class ConstantBackoff {\n    /**\n     * Creates a new ConstantBackoff.\n     * @param backoff the backoff-time to return\n     */\n    constructor(backoff) {\n        this._retries = 0;\n        if (!Number.isInteger(backoff) || backoff < 0) {\n            throw new Error(\"Backoff must be a positive integer\");\n        }\n        this.backoff = backoff;\n    }\n    get retries() {\n        return this._retries;\n    }\n    get current() {\n        return this.backoff;\n    }\n    next() {\n        this._retries++;\n        return this.backoff;\n    }\n    reset() {\n        this._retries = 0;\n    }\n}\n//# sourceMappingURL=constantbackoff.js.map","/**\n * ExponentialBackoff increases the backoff-time exponentially.\n * An optional maximum can be provided as an upper bound to the\n * exponent and thus to the returned backoff.\n *\n * The series can be described as ('i' is the current step/retry):\n *    backoff = base * 2^i                | without bound\n *    backoff = base * 2^min(i, expMax)   | with bound\n *\n * Example:\n *\n * 1) Without bound:\n *   base = 1000, expMax = undefined\n *   backoff = 1000 * 2^0 = 1000 // first retry\n *   backoff = 1000 * 2^1 = 2000 // second retry\n *   backoff = 1000 * 2^2 = 4000 // ...doubles with every retry\n *   backoff = 1000 * 2^3 = 8000\n *   backoff = 1000 * 2^4 = 16000\n *   ... // and so on\n *\n * 2) With bound:\n *  base = 1000, expMax = 3\n *  backoff = 1000 * 2^0 = 1000 // first retry\n *  backoff = 1000 * 2^1 = 2000 // second retry\n *  backoff = 1000 * 2^2 = 4000 // third retry\n *  backoff = 1000 * 2^3 = 8000 // maximum reached, don't increase further\n *  backoff = 1000 * 2^3 = 8000\n *  backoff = 1000 * 2^3 = 8000\n *  ... // and so on\n */\nexport class ExponentialBackoff {\n    /**\n     * Creates a new ExponentialBackoff.\n     * @param base the base of the exponentiation\n     * @param expMax the maximum exponent, no bound if undefined\n     */\n    constructor(base, expMax) {\n        this._retries = 0;\n        if (!Number.isInteger(base) || base < 0) {\n            throw new Error(\"Base must be a positive integer or zero\");\n        }\n        if (expMax !== undefined && (!Number.isInteger(expMax) || expMax < 0)) {\n            throw new Error(\"ExpMax must be a undefined, a positive integer or zero\");\n        }\n        this.base = base;\n        this.expMax = expMax;\n        this.i = 0;\n    }\n    get retries() {\n        return this._retries;\n    }\n    get current() {\n        return this.base * Math.pow(2, this.i);\n    }\n    next() {\n        this._retries++;\n        this.i =\n            this.expMax === undefined\n                ? this.i + 1\n                : Math.min(this.i + 1, this.expMax);\n        return this.current;\n    }\n    reset() {\n        this._retries = 0;\n        this.i = 0;\n    }\n}\n//# sourceMappingURL=exponentialbackoff.js.map","/**\n * LinearBackoff returns a backoff-time that is incremented by a fixed amount\n * with every step/retry. An optional maximum can be provided as an upper bound\n * to the returned backoff.\n *\n * The series can be described as ('i' is the current step/retry):\n *   backoff = initial + increment * i                | without bound\n *   backoff = initial + increment * min(i, max)      | with bound\n *\n * Example:\n *\n * 1) Without bound:\n *  initial = 1000, increment = 1000\n *  backoff = 1000 + 1000 * 0 = 1000 // first retry\n *  backoff = 1000 + 1000 * 1 = 2000 // second retry\n *  backoff = 1000 + 1000 * 2 = 3000 // ...increases by 'increment' with every retry\n *  backoff = 1000 + 1000 * 3 = 4000\n *  backoff = 1000 + 1000 * 4 = 5000\n *  ... // and so on\n *\n *  2) With bound:\n *  initial = 1000, increment = 1000, max = 5000\n *  backoff = 1000 + 1000 * 0 = 1000 // first retry\n *  backoff = 1000 + 1000 * 1 = 2000 // second retry\n *  backoff = 1000 + 1000 * 2 = 3000 // third retry\n *  backoff = 1000 + 1000 * 3 = 4000 // fourth retry\n *  backoff = 1000 + 1000 * 4 = 5000 // maximum reached, don't increase further\n *  backoff = 1000 + 1000 * 4 = 5000\n *  backoff = 1000 + 1000 * 4 = 5000\n *  ... // and so on\n */\nexport class LinearBackoff {\n    /**\n     * Creates a new LinearBackoff.\n     * @param initial the initial backoff-time in milliseconds\n     * @param increment the amount to increment the backoff-time with every step (in milliseconds)\n     * @param max the maximum backoff-time (in milliseconds), no bound if undefined\n     */\n    constructor(initial, increment, max) {\n        this.i = 0;\n        this._retries = 0;\n        if (initial < 0) {\n            throw new Error(\"Initial must be a positive number or zero\");\n        }\n        if (increment < 0) {\n            throw new Error(\"Increment must be a positive number or zero\");\n        }\n        if (max !== undefined && max < 0) {\n            throw new Error(\"Max must be undefined, a positive number or zero\");\n        }\n        if (max !== undefined && max < initial) {\n            throw new Error(\"Max must be undefined or greater than or equal to initial\");\n        }\n        this.initial = initial;\n        this.increment = increment;\n        this.max = max;\n    }\n    get retries() {\n        return this._retries;\n    }\n    get current() {\n        return this.max === undefined\n            ? this.initial + this.increment * this.i\n            : Math.min(this.initial + this.increment * this.i, this.max);\n    }\n    next() {\n        this._retries++;\n        this.i++;\n        return this.current;\n    }\n    reset() {\n        this._retries = 0;\n        this.i = 0;\n    }\n}\n//# sourceMappingURL=linearbackoff.js.map","/**\n * An array queue is a queue that has an unbounded capacity. Reading from an array queue\n * will return the oldest element and effectively remove it from the queue.\n */\nexport class ArrayQueue {\n    constructor() {\n        this.elements = [];\n    }\n    add(element) {\n        this.elements.push(element);\n    }\n    clear() {\n        this.elements.length = 0;\n    }\n    forEach(fn) {\n        this.elements.forEach(fn);\n    }\n    length() {\n        return this.elements.length;\n    }\n    isEmpty() {\n        return this.elements.length === 0;\n    }\n    peek() {\n        return this.elements[0];\n    }\n    read() {\n        return this.elements.shift();\n    }\n}\n//# sourceMappingURL=array_queue.js.map","/**\n * A ring queue is a queue that has a fixed capacity. When the queue is full, the oldest element is\n * removed to make room for the new element. Reading from a ring queue will return the oldest\n * element and effectively remove it from the queue.\n */\nexport class RingQueue {\n    constructor(capacity) {\n        if (!Number.isInteger(capacity) || capacity <= 0) {\n            throw new Error(\"Capacity must be a positive integer\");\n        }\n        this.elements = new Array(capacity + 1); // +1 to distinguish between full and empty\n        this.head = 0;\n        this.tail = 0;\n    }\n    add(element) {\n        this.elements[this.head] = element;\n        this.head = (this.head + 1) % this.elements.length;\n        if (this.head === this.tail) {\n            this.tail = (this.tail + 1) % this.elements.length;\n        }\n    }\n    clear() {\n        this.head = 0;\n        this.tail = 0;\n    }\n    forEach(fn) {\n        for (let i = this.tail; i !== this.head; i = (i + 1) % this.elements.length) {\n            fn(this.elements[i]);\n        }\n    }\n    length() {\n        return this.tail === this.head\n            ? 0\n            : this.tail < this.head\n                ? this.head - this.tail\n                : this.elements.length - this.tail + this.head;\n    }\n    isEmpty() {\n        return this.head === this.tail;\n    }\n    peek() {\n        return this.isEmpty() ? undefined : this.elements[this.tail];\n    }\n    read() {\n        const e = this.peek();\n        if (e !== undefined) {\n            this.tail = (this.tail + 1) % this.elements.length;\n        }\n        return e;\n    }\n}\n//# sourceMappingURL=ring_queue.js.map","/**\n * Events that can be fired by the websocket.\n */\nexport var WebsocketEvent;\n(function (WebsocketEvent) {\n    /** Fired when the connection is opened. */\n    WebsocketEvent[\"open\"] = \"open\";\n    /** Fired when the connection is closed. */\n    WebsocketEvent[\"close\"] = \"close\";\n    /** Fired when the connection has been closed because of an error, such as when some data couldn't be sent. */\n    WebsocketEvent[\"error\"] = \"error\";\n    /** Fired when a message is received. */\n    WebsocketEvent[\"message\"] = \"message\";\n    /** Fired when the websocket tries to reconnect after a connection loss. */\n    WebsocketEvent[\"retry\"] = \"retry\";\n    /** Fired when the websocket successfully reconnects after a connection loss. */\n    WebsocketEvent[\"reconnect\"] = \"reconnect\";\n})(WebsocketEvent || (WebsocketEvent = {}));\n//# sourceMappingURL=websocket_event.js.map","import { WebsocketEvent, } from \"./websocket_event\";\n/**\n * A websocket wrapper that can be configured to reconnect automatically and buffer messages when the websocket is not connected.\n */\nexport class Websocket {\n    /**\n     * Creates a new websocket.\n     *\n     * @param url to connect to.\n     * @param protocols optional protocols to use.\n     * @param options optional options to use.\n     */\n    constructor(url, protocols, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;\n        this._closedByUser = false; // whether the websocket was closed by the user\n        /**\n         * Handles the 'open' event of the browser-native websocket.\n         * @param event to handle.\n         */\n        this.handleOpenEvent = (event) => this.handleEvent(WebsocketEvent.open, event);\n        /**\n         * Handles the 'error' event of the browser-native websocket.\n         * @param event to handle.\n         */\n        this.handleErrorEvent = (event) => this.handleEvent(WebsocketEvent.error, event);\n        /**\n         * Handles the 'close' event of the browser-native websocket.\n         * @param event to handle.\n         */\n        this.handleCloseEvent = (event) => this.handleEvent(WebsocketEvent.close, event);\n        /**\n         * Handles the 'message' event of the browser-native websocket.\n         * @param event to handle.\n         */\n        this.handleMessageEvent = (event) => this.handleEvent(WebsocketEvent.message, event);\n        this._url = url;\n        this._protocols = protocols;\n        // make a copy of the options to prevent the user from changing them\n        this._options = {\n            buffer: options === null || options === void 0 ? void 0 : options.buffer,\n            retry: {\n                maxRetries: (_a = options === null || options === void 0 ? void 0 : options.retry) === null || _a === void 0 ? void 0 : _a.maxRetries,\n                instantReconnect: (_b = options === null || options === void 0 ? void 0 : options.retry) === null || _b === void 0 ? void 0 : _b.instantReconnect,\n                backoff: (_c = options === null || options === void 0 ? void 0 : options.retry) === null || _c === void 0 ? void 0 : _c.backoff,\n            },\n            listeners: {\n                open: [...((_e = (_d = options === null || options === void 0 ? void 0 : options.listeners) === null || _d === void 0 ? void 0 : _d.open) !== null && _e !== void 0 ? _e : [])],\n                close: [...((_g = (_f = options === null || options === void 0 ? void 0 : options.listeners) === null || _f === void 0 ? void 0 : _f.close) !== null && _g !== void 0 ? _g : [])],\n                error: [...((_j = (_h = options === null || options === void 0 ? void 0 : options.listeners) === null || _h === void 0 ? void 0 : _h.error) !== null && _j !== void 0 ? _j : [])],\n                message: [...((_l = (_k = options === null || options === void 0 ? void 0 : options.listeners) === null || _k === void 0 ? void 0 : _k.message) !== null && _l !== void 0 ? _l : [])],\n                retry: [...((_o = (_m = options === null || options === void 0 ? void 0 : options.listeners) === null || _m === void 0 ? void 0 : _m.retry) !== null && _o !== void 0 ? _o : [])],\n                reconnect: [...((_q = (_p = options === null || options === void 0 ? void 0 : options.listeners) === null || _p === void 0 ? void 0 : _p.reconnect) !== null && _q !== void 0 ? _q : [])],\n            },\n        };\n        this._underlyingWebsocket = this.tryConnect();\n    }\n    /**\n     * Getter for the url.\n     *\n     * @return the url.\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Getter for the protocols.\n     *\n     * @return the protocols, or undefined if none were provided.\n     */\n    get protocols() {\n        return this._protocols;\n    }\n    /**\n     * Getter for the buffer.\n     *\n     * @return the buffer, or undefined if none was provided.\n     */\n    get buffer() {\n        return this._options.buffer;\n    }\n    /**\n     * Getter for the maxRetries.\n     *\n     * @return the maxRetries, or undefined if none was provided (no limit).\n     */\n    get maxRetries() {\n        return this._options.retry.maxRetries;\n    }\n    /**\n     * Getter for the instantReconnect.\n     *\n     * @return the instantReconnect, or undefined if none was provided.\n     */\n    get instantReconnect() {\n        return this._options.retry.instantReconnect;\n    }\n    /**\n     * Getter for the backoff.\n     *\n     * @return the backoff, or undefined if none was provided.\n     */\n    get backoff() {\n        return this._options.retry.backoff;\n    }\n    /**\n     * Whether the websocket was closed by the user. A websocket is closed by the user by calling close().\n     *\n     * @return true if the websocket was closed by the user, false otherwise.\n     */\n    get closedByUser() {\n        return this._closedByUser;\n    }\n    /**\n     * Getter for the last 'open' event, e.g. the last time the websocket was connected.\n     *\n     * @return the last 'open' event, or undefined if the websocket was never connected.\n     */\n    get lastConnection() {\n        return this._lastConnection;\n    }\n    /**\n     * Getter for the underlying websocket. This can be used to access the browser's native websocket directly.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n     * @return the underlying websocket.\n     */\n    get underlyingWebsocket() {\n        return this._underlyingWebsocket;\n    }\n    /**\n     * Getter for the readyState of the underlying websocket.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState\n     * @return the readyState of the underlying websocket.\n     */\n    get readyState() {\n        return this._underlyingWebsocket.readyState;\n    }\n    /**\n     * Getter for the bufferedAmount of the underlying websocket.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount\n     * @return the bufferedAmount of the underlying websocket.\n     */\n    get bufferedAmount() {\n        return this._underlyingWebsocket.bufferedAmount;\n    }\n    /**\n     * Getter for the extensions of the underlying websocket.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions\n     * @return the extensions of the underlying websocket.\n     */\n    get extensions() {\n        return this._underlyingWebsocket.extensions;\n    }\n    /**\n     * Getter for the binaryType of the underlying websocket.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType\n     * @return the binaryType of the underlying websocket.\n     */\n    get binaryType() {\n        return this._underlyingWebsocket.binaryType;\n    }\n    /**\n     * Setter for the binaryType of the underlying websocket.\n     *\n     * @param value to set, 'blob' or 'arraybuffer'.\n     */\n    set binaryType(value) {\n        this._underlyingWebsocket.binaryType = value;\n    }\n    /**\n     * Sends data over the websocket.\n     *\n     * If the websocket is not connected and a buffer was provided on creation, the data will be added to the buffer.\n     * If no buffer was provided or the websocket was closed by the user, the data will be dropped.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     * @param data to send.\n     */\n    send(data) {\n        if (this.closedByUser)\n            return; // no-op if closed by user\n        if (this._underlyingWebsocket.readyState === this._underlyingWebsocket.OPEN) {\n            this._underlyingWebsocket.send(data); // websocket is connected, send data\n        }\n        else if (this.buffer !== undefined) {\n            this.buffer.add(data); // websocket is not connected, add data to buffer\n        }\n    }\n    /**\n     * Close the websocket. No connection-retry will be attempted after this.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\n     * @param code optional close code.\n     * @param reason optional close reason.\n     */\n    close(code, reason) {\n        this.cancelScheduledConnectionRetry(); // cancel any scheduled retries\n        this._closedByUser = true; // mark websocket as closed by user\n        this._underlyingWebsocket.close(code, reason); // close underlying websocket with provided code and reason\n    }\n    /**\n     * Adds an event listener for the given event-type.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n     * @param type of the event to add the listener for.\n     * @param listener to add.\n     * @param options to use when adding the listener.\n     */\n    addEventListener(type, listener, options) {\n        this._options.listeners[type].push({ listener, options }); // add listener to list of listeners\n    }\n    /**\n     * Removes one or more event listener for the given event-type that match the given listener and options.\n     *\n     * @param type of the event to remove the listener for.\n     * @param listener to remove.\n     * @param options that were used when the listener was added.\n     */\n    removeEventListener(type, listener, options) {\n        const isListenerNotToBeRemoved = (l) => l.listener !== listener || l.options !== options;\n        this._options.listeners[type] =\n            this._options.listeners[type].filter(isListenerNotToBeRemoved); // only keep listeners that are not to be removed\n    }\n    /**\n     * Creates a new browser-native websocket and connects it to the given URL with the given protocols\n     * and adds all event listeners to the browser-native websocket.\n     *\n     * @return the created browser-native websocket which is also stored in the '_underlyingWebsocket' property.\n     */\n    tryConnect() {\n        this._underlyingWebsocket = new WebSocket(this.url, this.protocols); // create new browser-native websocket and add all event listeners\n        this._underlyingWebsocket.addEventListener(WebsocketEvent.open, this.handleOpenEvent);\n        this._underlyingWebsocket.addEventListener(WebsocketEvent.close, this.handleCloseEvent);\n        this._underlyingWebsocket.addEventListener(WebsocketEvent.error, this.handleErrorEvent);\n        this._underlyingWebsocket.addEventListener(WebsocketEvent.message, this.handleMessageEvent);\n        return this._underlyingWebsocket;\n    }\n    /**\n     * Removes all event listeners from the browser-native websocket and closes it.\n     */\n    clearWebsocket() {\n        this._underlyingWebsocket.removeEventListener(WebsocketEvent.open, this.handleOpenEvent);\n        this._underlyingWebsocket.removeEventListener(WebsocketEvent.close, this.handleCloseEvent);\n        this._underlyingWebsocket.removeEventListener(WebsocketEvent.error, this.handleErrorEvent);\n        this._underlyingWebsocket.removeEventListener(WebsocketEvent.message, this.handleMessageEvent);\n        this._underlyingWebsocket.close();\n    }\n    /**\n     * Dispatch an event to all listeners of the given event-type.\n     *\n     * @param type of the event to dispatch.\n     * @param event to dispatch.\n     */\n    dispatchEvent(type, event) {\n        const eventListeners = this._options.listeners[type];\n        const newEventListeners = [];\n        eventListeners.forEach(({ listener, options }) => {\n            listener(this, event); // invoke listener with event\n            if (options === undefined ||\n                options.once === undefined ||\n                !options.once) {\n                newEventListeners.push({ listener, options }); // only keep listener if it isn't a once-listener\n            }\n        });\n        this._options.listeners[type] = newEventListeners; // replace old listeners with new listeners that don't include once-listeners\n    }\n    /**\n     * Handles the given event by dispatching it to all listeners of the given event-type.\n     *\n     * @param type of the event to handle.\n     * @param event to handle.\n     */\n    handleEvent(type, event) {\n        switch (type) {\n            case WebsocketEvent.close:\n                this.dispatchEvent(type, event);\n                this.scheduleConnectionRetryIfNeeded(); // schedule a new connection retry if the websocket was closed by the server\n                break;\n            case WebsocketEvent.open:\n                if (this.backoff !== undefined && this._lastConnection !== undefined) {\n                    // websocket was reconnected, dispatch reconnect event and reset backoff\n                    const detail = {\n                        retries: this.backoff.retries,\n                        lastConnection: new Date(this._lastConnection),\n                    };\n                    const event = new CustomEvent(WebsocketEvent.reconnect, {\n                        detail,\n                    });\n                    this.dispatchEvent(WebsocketEvent.reconnect, event);\n                    this.backoff.reset();\n                }\n                this._lastConnection = new Date();\n                this.dispatchEvent(type, event); // dispatch open event and send buffered data\n                this.sendBufferedData();\n                break;\n            case WebsocketEvent.retry:\n                this.dispatchEvent(type, event); // dispatch retry event and try to connect\n                this.clearWebsocket(); // clear the old websocket\n                this.tryConnect();\n                break;\n            default:\n                this.dispatchEvent(type, event); // dispatch event to all listeners of the given event-type\n                break;\n        }\n    }\n    /**\n     * Sends buffered data if there is a buffer defined.\n     */\n    sendBufferedData() {\n        if (this.buffer === undefined) {\n            return; // no buffer defined, nothing to send\n        }\n        for (let ele = this.buffer.read(); ele !== undefined; ele = this.buffer.read()) {\n            this.send(ele); // send buffered data\n        }\n    }\n    /**\n     * Schedules a connection-retry if there is a backoff defined and the websocket was not closed by the user.\n     */\n    scheduleConnectionRetryIfNeeded() {\n        if (this.closedByUser) {\n            return; // user closed the websocket, no retry\n        }\n        if (this.backoff === undefined) {\n            return; // no backoff defined, no retry\n        }\n        // handler dispatches the retry event to all listeners of the retry event-type\n        const handleRetryEvent = (detail) => {\n            const event = new CustomEvent(WebsocketEvent.retry, { detail });\n            this.handleEvent(WebsocketEvent.retry, event);\n        };\n        // create retry event detail, depending on the 'instantReconnect' option\n        const retryEventDetail = {\n            backoff: this._options.retry.instantReconnect === true ? 0 : this.backoff.next(),\n            retries: this._options.retry.instantReconnect === true\n                ? 0\n                : this.backoff.retries,\n            lastConnection: this._lastConnection,\n        };\n        // schedule a new connection-retry if the maximum number of retries is not reached yet\n        if (this._options.retry.maxRetries === undefined ||\n            retryEventDetail.retries <= this._options.retry.maxRetries) {\n            this.retryTimeout = globalThis.setTimeout(() => handleRetryEvent(retryEventDetail), retryEventDetail.backoff);\n        }\n    }\n    /**\n     * Cancels the scheduled connection-retry, if there is one.\n     */\n    cancelScheduledConnectionRetry() {\n        globalThis.clearTimeout(this.retryTimeout);\n    }\n}\n//# sourceMappingURL=websocket.js.map","import { WebsocketEvent, } from \"./websocket_event\";\nimport { Websocket } from \"./websocket\";\n/**\n * Builder for websockets.\n */\nexport class WebsocketBuilder {\n    /**\n     * Creates a new WebsocketBuilder.\n     *\n     * @param url the url to connect to\n     */\n    constructor(url) {\n        this._url = url;\n    }\n    /**\n     * Getter for the url.\n     *\n     * @returns the url\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Adds protocols to the websocket. Subsequent calls to this method will override the previously set protocols.\n     *\n     * @param protocols the protocols to add\n     */\n    withProtocols(protocols) {\n        this._protocols = protocols;\n        return this;\n    }\n    /**\n     * Getter for the protocols.\n     *\n     * @returns the protocols, undefined if no protocols have been set\n     */\n    get protocols() {\n        return this._protocols;\n    }\n    /**\n     * Sets the maximum number of retries before giving up. No limit if undefined.\n     *\n     * @param maxRetries the maximum number of retries before giving up\n     */\n    withMaxRetries(maxRetries) {\n        var _a;\n        this._options = Object.assign(Object.assign({}, this._options), { retry: Object.assign(Object.assign({}, (_a = this._options) === null || _a === void 0 ? void 0 : _a.retry), { maxRetries }) });\n        return this;\n    }\n    /**\n     * Getter for the maximum number of retries before giving up.\n     *\n     * @returns the maximum number of retries before giving up, undefined if no maximum has been set\n     */\n    get maxRetries() {\n        var _a, _b;\n        return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.maxRetries;\n    }\n    /**\n     * Sets wether to reconnect immediately after a connection has been lost, ignoring the backoff strategy for the first retry.\n     *\n     * @param instantReconnect wether to reconnect immediately after a connection has been lost\n     */\n    withInstantReconnect(instantReconnect) {\n        var _a;\n        this._options = Object.assign(Object.assign({}, this._options), { retry: Object.assign(Object.assign({}, (_a = this._options) === null || _a === void 0 ? void 0 : _a.retry), { instantReconnect }) });\n        return this;\n    }\n    /**\n     * Getter for wether to reconnect immediately after a connection has been lost, ignoring the backoff strategy for the first retry.\n     *\n     * @returns wether to reconnect immediately after a connection has been lost, undefined if no value has been set\n     */\n    get instantReconnect() {\n        var _a, _b;\n        return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.instantReconnect;\n    }\n    /**\n     * Adds a backoff to the websocket. Subsequent calls to this method will override the previously set backoff.\n     *\n     * @param backoff the backoff to add\n     */\n    withBackoff(backoff) {\n        var _a;\n        this._options = Object.assign(Object.assign({}, this._options), { retry: Object.assign(Object.assign({}, (_a = this._options) === null || _a === void 0 ? void 0 : _a.retry), { backoff }) });\n        return this;\n    }\n    /**\n     * Getter for the backoff.\n     *\n     * @returns the backoff, undefined if no backoff has been set\n     */\n    get backoff() {\n        var _a, _b;\n        return (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoff;\n    }\n    /**\n     * Adds a buffer to the websocket. Subsequent calls to this method will override the previously set buffer.\n     *\n     * @param buffer the buffer to add\n     */\n    withBuffer(buffer) {\n        this._options = Object.assign(Object.assign({}, this._options), { buffer });\n        return this;\n    }\n    /**\n     * Getter for the buffer.\n     *\n     * @returns the buffer, undefined if no buffer has been set\n     */\n    get buffer() {\n        var _a;\n        return (_a = this._options) === null || _a === void 0 ? void 0 : _a.buffer;\n    }\n    /**\n     * Adds an 'open' event listener to the websocket. Subsequent calls to this method will add additional listeners that will be\n     * called in the order they were added.\n     *\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    onOpen(listener, options) {\n        this.addListener(WebsocketEvent.open, listener, options);\n        return this;\n    }\n    /**\n     * Adds an 'close' event listener to the websocket. Subsequent calls to this method will add additional listeners that will be\n     * called in the order they were added.\n     *\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    onClose(listener, options) {\n        this.addListener(WebsocketEvent.close, listener, options);\n        return this;\n    }\n    /**\n     * Adds an 'error' event listener to the websocket. Subsequent calls to this method will add additional listeners that will be\n     * called in the order they were added.\n     *\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    onError(listener, options) {\n        this.addListener(WebsocketEvent.error, listener, options);\n        return this;\n    }\n    /**\n     * Adds an 'message' event listener to the websocket. Subsequent calls to this method will add additional listeners that will be\n     * called in the order they were added.\n     *\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    onMessage(listener, options) {\n        this.addListener(WebsocketEvent.message, listener, options);\n        return this;\n    }\n    /**\n     * Adds an 'retry' event listener to the websocket. Subsequent calls to this method will add additional listeners that will be\n     * called in the order they were added.\n     *\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    onRetry(listener, options) {\n        this.addListener(WebsocketEvent.retry, listener, options);\n        return this;\n    }\n    /**\n     * Adds an 'reconnect' event listener to the websocket. Subsequent calls to this method will add additional listeners that will be\n     * called in the order they were added.\n     *\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    onReconnect(listener, options) {\n        this.addListener(WebsocketEvent.reconnect, listener, options);\n        return this;\n    }\n    /**\n     * Builds the websocket.\n     *\n     * @return a new websocket, with the set options\n     */\n    build() {\n        return new Websocket(this._url, this._protocols, this._options); // instantiate the websocket with the set options\n    }\n    /**\n     * Adds an event listener to the options.\n     *\n     * @param event the event to add the listener to\n     * @param listener the listener to add\n     * @param options the listener options\n     */\n    addListener(event, listener, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n        this._options = Object.assign(Object.assign({}, this._options), { listeners: {\n                open: (_c = (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.listeners) === null || _b === void 0 ? void 0 : _b.open) !== null && _c !== void 0 ? _c : [],\n                close: (_f = (_e = (_d = this._options) === null || _d === void 0 ? void 0 : _d.listeners) === null || _e === void 0 ? void 0 : _e.close) !== null && _f !== void 0 ? _f : [],\n                error: (_j = (_h = (_g = this._options) === null || _g === void 0 ? void 0 : _g.listeners) === null || _h === void 0 ? void 0 : _h.error) !== null && _j !== void 0 ? _j : [],\n                message: (_m = (_l = (_k = this._options) === null || _k === void 0 ? void 0 : _k.listeners) === null || _l === void 0 ? void 0 : _l.message) !== null && _m !== void 0 ? _m : [],\n                retry: (_q = (_p = (_o = this._options) === null || _o === void 0 ? void 0 : _o.listeners) === null || _p === void 0 ? void 0 : _p.retry) !== null && _q !== void 0 ? _q : [],\n                reconnect: (_t = (_s = (_r = this._options) === null || _r === void 0 ? void 0 : _r.listeners) === null || _s === void 0 ? void 0 : _s.reconnect) !== null && _t !== void 0 ? _t : [],\n                [event]: [\n                    ...((_w = (_v = (_u = this._options) === null || _u === void 0 ? void 0 : _u.listeners) === null || _v === void 0 ? void 0 : _v[event]) !== null && _w !== void 0 ? _w : []),\n                    { listener, options },\n                ],\n            } });\n        return this;\n    }\n}\n//# sourceMappingURL=websocket_builder.js.map"],"names":["WebsocketEvent","event"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}